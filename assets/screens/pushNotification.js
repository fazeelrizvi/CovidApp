
import React, {useState, useEffect} from 'react';
import {
  Alert,
  StyleSheet,
  Text,
  TouchableHighlight,
  View,
  DeviceEventEmitter,
  Button,
  SafeAreaView,
  AppState
} from 'react-native';
import App from '../../App';
var PushNotification = require("react-native-push-notification");
import BackgroundTimer from 'react-native-background-timer';
import PushNotificationIOS from "@react-native-community/push-notification-ios";

export default class PushNoti extends React.Component {
  constructor(props){
    super(props);
    this.handleAppStateChange = this.handleAppStateChange.bind(this);
    }
   
    
  componentDidMount(){
    PushNotification.configure({
  // (optional) Called when Token is generated (iOS and Android)
  onRegister: function (token) {
    console.log("TOKEN:", token);
  },
    });

  AppState.addEventListener('change', this.handleAppStateChange);

  // const intervalId = BackgroundTimer.setInterval(() => {
  //   // this will be executed every 200 ms
  //   // even when app is the the background
  //   // console.log('tic');
  // }, 5000);

  }
  handleAppStateChange(appstate){
    if(appstate == 'background'){
      PushNotification.localNotification({
        /* Android Only Properties */
        id: "0", // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        ticker: "My Notification Ticker", // (optional)
        autoCancel: true, // (optional) default: true
        largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
        smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
        bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
        subText: "This is a subText", // (optional) default: none
        color: "red", // (optional) default: system default
        vibrate: true, // (optional) default: true
        vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
        tag: "some_tag", // (optional) add tag to message
        group: "group", // (optional) add group to message
        ongoing: false, // (optional) set whether this is an "ongoing" notification
        priority: "high", // (optional) set notification priority, default: high
        visibility: "private", // (optional) set notification visibility, default: private
        importance: "high", // (optional) set notification importance, default: high
        allowWhileIdle: false, // (optional) set notification to work while on doze, default: false
        ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear)
      
        /* iOS only properties */
        alertAction: "view", // (optional) default: view
        category: "", // (optional) default: empty string
        userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
      
        /* iOS and Android properties */
        title: "My Notification Title", // (optional)
        message: "My Notification Message", // (required)
        playSound: false, // (optional) default: true
        soundName: "default", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
        number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        repeatType: "day", // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
        actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
      });
    }
  }
  componentWillMount(){
AppState.addEventListener('change', this.handleAppStateChange);
  }
  notify(){
    PushNotification.localNotification({
      /* Android Only Properties */
      id: "0", // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: "My Notification Ticker", // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
      subText: "This is a subText", // (optional) default: none
      color: "red", // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: "some_tag", // (optional) add tag to message
      group: "group", // (optional) add group to message
      ongoing: false, // (optional) set whether this is an "ongoing" notification
      priority: "high", // (optional) set notification priority, default: high
      visibility: "private", // (optional) set notification visibility, default: private
      importance: "high", // (optional) set notification importance, default: high
      allowWhileIdle: false, // (optional) set notification to work while on doze, default: false
      ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear)
    
      /* iOS only properties */
      alertAction: "view", // (optional) default: view
      category: "", // (optional) default: empty string
      userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
    
      /* iOS and Android properties */
      title: "My Notification Title", // (optional)
      message: "My Notification Message", // (required)
      playSound: false, // (optional) default: true
      soundName: "default", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      repeatType: "day", // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
      actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
    });
  }
    render() {
      return (
        <SafeAreaView>
      <View style={{justifyContent:'center'}}>
        <Button title="Local noti" 
        
        onPress={()=>{this.notify()}}/>
      </View>
      </SafeAreaView>
      );
    }
  }
  
   const AppPush = () => {
    const [permissions, setPermissions] = useState({});
  
    useEffect(() => {
      PushNotificationIOS.requestPermissions();
      PushNotificationIOS.addEventListener('register', onRegistered);
      PushNotificationIOS.addEventListener(
        'registrationError',
        onRegistrationError,
      );
      PushNotificationIOS.addEventListener('notification', onRemoteNotification);
      PushNotificationIOS.addEventListener(
        'localNotification',
        onLocalNotification,
      );
      return () => {
        PushNotificationIOS.removeEventListener('register', onRegistered);
        PushNotificationIOS.removeEventListener(
          'registrationError',
          onRegistrationError,
        );
        PushNotificationIOS.removeEventListener(
          'notification',
          onRemoteNotification,
        );
        PushNotificationIOS.removeEventListener(
          'localNotification',
          onLocalNotification,
        );
      };
    }, []);
  
    const sendNotification = () => {
      DeviceEventEmitter.emit('remoteNotificationReceived', {
        remote: true,
        aps: {
          alert: 'Sample notification',
          badge: '+1',
          sound: 'default',
          category: 'REACT_NATIVE',
          'content-available': 1,
        },
      });``
    };
  
     sendLocalNotification = () => {
      PushNotificationIOS.presentLocalNotification({
        alertBody: 'Sample local notification',
        fireDate: new Date().toISOString(),
        applicationIconBadgeNumber: 1,
      });
    };
  
    const scheduleLocalNotification = () => {
      PushNotificationIOS.scheduleLocalNotification({
        alertBody: 'Test Local Notification',
        fireDate: new Date().toISOString(),
      });
    };
  
    const onRegistered = deviceToken => {
      Alert.alert('Registered For Remote Push', `Device Token: ${deviceToken}`, [
        {
          text: 'Dismiss',
          onPress: null,
        },
      ]);
    };
  
    const onRegistrationError = error => {
      Alert.alert(
        'Failed To Register For Remote Push',
        `Error (${error.code}): ${error.message}`,
        [
          {
            text: 'Dismiss',
            onPress: null,
          },
        ],
      );
    };
  
    const onRemoteNotification = notification => {
      const result = `Message: ${notification.getMessage()};\n
        badge: ${notification.getBadgeCount()};\n
        sound: ${notification.getSound()};\n
        category: ${notification.getCategory()};\n
        content-available: ${notification.getContentAvailable()}.`;
  
      Alert.alert('Push Notification Received', result, [
        {
          text: 'Dismiss',
          onPress: null,
        },
      ]);
    };
  
    const onLocalNotification = notification => {
      Alert.alert(
        'Local Notification Received',
        'Alert message: ' + notification.getMessage(),
        [
          {
            text: 'Dismiss',
            onPress: null,
          },
        ],
      );
    };
  
    const showPermissions = () => {
      PushNotificationIOS.checkPermissions(permissions => {
        setPermissions({permissions});
      });
    };
  
    return (
      <View style={styles.container}>
        <Button onPress={sendNotification} title="Send fake notification" />
  
        <Button
          onPress={()=>this.sendLocalNotification}
          title="Send fake local notification"
        />
        <Button
          onPress={scheduleLocalNotification}
          title="Schedule fake local notification"
        />
  
        <Button
          onPress={ PushNotificationIOS.setApplicationIconBadgeNumber(42)}
          title="Set app's icon badge to 42"
        />
        <Button
          onPress={PushNotificationIOS.setApplicationIconBadgeNumber(0)}
          title="Clear app's icon badge"
        />
        <View>
          <Button onPress={showPermissions} title="Show enabled permissions" />
          <Text>{JSON.stringify(permissions)}</Text>
        </View>
      </View>
    );
  };
  
  const styles = StyleSheet.create({
    container: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: '#F5FCFF',
    },
    button: {
      padding: 10,
      alignItems: 'center',
      justifyContent: 'center',
    },
    buttonLabel: {
      color: 'blue',
    },
  });